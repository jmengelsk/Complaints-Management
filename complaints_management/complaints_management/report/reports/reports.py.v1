# Copyright (c) 2022, Josef Engelskirchen and contributors For license information, please see license.txt

import frappe
from frappe import _, msgprint


def execute(filters=None):
	if not filters:
		filters = {}

	complaints_list = get_complaints(filters)
	columns = get_columns()

	if not complaints_list:
		msgprint(_("No record found"))
		return columns, complaints_list

	data = []
	for complaint in complaints_list:
		row = [
			complaint.cpldate,
			complaint.name,
			complaint.customer,
			complaint.approval_by,
			complaint.cn_amount,
		]
		data.append(row)

	sumcn = get_sumcn(filters)

	message = None
#	message = ["<br>Choosen Filters are "]
#	message.append("<br>Status Filter : " + filters.get("status_filter"))

	chart = None

	report_summary = [
		{
                        "label": "# of Complaints",
			"value": len(data),
			"datatype": "Data",
			"indicator": "Blue"
		},
		{
                        "label": _("Total C/N Amount"),
                        "indicator": "Green",
			"value": sumcn,
			"datatype": "Currency",
			"currency": "EUR"
		}
	]

	return columns, data, message, chart, report_summary

def get_columns():
    return [
       {
          "label": _("Complaint Date"),
          "fieldname": "cpldate",
          "label": _("Complaint Date"),
          "fieldtype": "Date",
          "dropdown": False,
          "sortable":False,
       },
       {
          "label": _("Complaint Nr"),
          "fieldname": "name",
          "fieldtype": "Data",
          "dropdown":False,
          "sortable":False,
       },
       {
          "label": _("Customer"),
          "fieldname": "customer",
          "fieldtype": "Data",
          "width": 350,
          "dropdown": False,
          "sortable": False,
       },
       {
          "label": _("Approved by"),
          "fieldname": "approval_by",
          "fieldtype": "Data",
          "dropdown": False,
          "sortable": False,
       },
       {
          "label": _("C/N Amount"),
          "fieldname": "cn_amount",
          "fieldtype": "Currency",
          "dropdown": False,
          "sortable": False,
       },
    ]

def get_conditions(filters):
	conditions = ""
	if filters.date_from_filter and filters.date_to_filter:
		if filters.date_from_filter > filters.date_to_filter:
			frappe.throw("The 'From Date' ({}) must be before the 'To Date' ({})".format(filters.date_from_filter, filters.date_to_filter))
	if filters.date_from_filter == None:
		filters.date_from_filter = "2010-01-01"
	if filters.date_to_filter == None:
		filters.date_to_filter = frappe.datetime.get_today()
	conditions = "cpldate between '" + filters.date_from_filter + "' and '" + filters.date_to_filter + "'"
	if filters.get("status_filter"): conditions += "and complaint_status = %(status_filter)s"
	if filters.get("customer_filter"): conditions += "and customer = %(customer_filter)s"
	if filters.get("approval_filter"): conditions += "and approval_by = %(approval_filter)s"

	return conditions


def get_complaints(filters):
    conditions=get_conditions(filters)
    return frappe.db.sql(
        """select cpldate, name, customer, approval_by, cn_amount
           from `tabComplaint`
           where %s order by cpldate asc"""
           % conditions,
           filters,
           as_dict=1,
     )

def get_sumcn(filters):
    conditions=get_conditions(filters)
    query = frappe.db.sql("""select sum(cn_amount) from tabComplaint where %s""" % conditions, filters)
    return query
