


# Copyright (c) 2022, Josef Engelskirchen and contributors For license information, please see license.txt

import frappe
from frappe import _, msgprint
import datetime

#from __future__ import unicode_literals
#import frappe
#from frappe import _
##from frappe.utils import flt,cstr

def execute(filters=None):
    columns = get_columns(filters)
    data = get_data(filters)
    conditions=get_conditions(filters)
#    datefilter = datetime.datetime.strptime(filters.date_from_filter,"%Y-%m-%d").date()
#    data = frappe.get_list("Complaint",
#         fields=[
#                  "cpldate",
#                  "name",
#                  "customer",
#                  "approval_by",
#                  "cn_amout",
#                  "'0' AS indent"
#                ],
#         filters=[
#                  {"cpldate":filters.get("date_from_filter")},
#                  {"cpldate":filters.get("date_to_filter")},
#                  {"complaint_status":filters.get("status_filter")},
#                  {"customer":filters.get("customer_filter")},
#                   if filters.get("approval_filter") > None :
#                  {"approval_by":filters.get("approval_filter")}
#                 ],
#         order_by='cpldate ASC')

#    data = [dic for dic in data if dic.cpldate.date() > datefilter]
#    data = sorted(data, key=lambda k: k['cpldate'])
    message = get_conditions(filters)
    today = datetime.datetime.now(tz=None).date()
    sumcn = get_sumcn(filters)
    chart = None
#    message = ["The letters '<b>dogs</b>' in numbers is <span style='color:Blue;'>Homar</span>"]
#    message.append("<br>The value of the Number Filter is : " + filters.get("status_filter"))

#    chart = {
#        'data':{
#            'labels':['d','o','g','s'],
#            'datasets':[
#                {'name':'Number','values':[3,6,4,7]},
#                {'name':'Vowel','values':[0,1,0,0]}
#            ]
#        },
#        'type':'bar'
#    }

#    report_summary = [{"label":"Count","value":len(data),'indicator':'Red' if len(data) < 10 else 'Green'}]

    report_summary = [
	{
            "value": len(data),
                "label": "# of Complaints",
                "datatype": "Data",
                "indicator": "Blue"
        },
        {
            "value": sumcn,
            "indicator": "Green","label": _("Total C/N Amount"),
            "datatype": "Currency",
            "currency": "EUR"
        }
    ]
    return columns, data, None,  chart, report_summary, message

def get_columns(filters):
    return[
       {'fieldname':'cpldate','label':'Complaint Date','fieldtype':'Date','dropdown':False,'sortable':False},
       {'fieldname':'name','label':'Complaint Nr','fieldtype':'Data','dropdown':False,'sortable':False},
       {'fieldname':'customer','label':'Customer','fieldtype':'Data',"width": 350,'dropdown':False,'sortable':False},
#       {'fieldname':'complaint_status','label':'Status','fieldtype':'Select','dropdown':False,'sortable':False}
       {'fieldname':'approval_by','label':'Approved by','fieldtype':'Data','dropdown':False,'sortable':False},
       {'fieldname':'cn_amout','label':'C/N Amount','fieldtype':'Currency','dropdown':False,'sortable':False},
    ]

def get_data(filters):
    conditions=get_conditions(filters)
#    cpllist = []
#    cpllist = frappe.db.sql("""select cpldate, name, customer, approval_by, cn_amout from tabComplaint where %s""" % conditions, filters)
#   cpllist = frappe.get_list("Complaint", fields=["cpldate","name","customer","approval_by","cn_amout","'0' AS indent"], order_by='cpldate ASC')
#    return cpllist
     return frappe.db.sql(
         """select cpldate, name, customer, approval_by, cn_amout
            from tabComplaint
            where %s"""
            % conditions,
            filters,
            as_dict=1,
     )

def get_sumcn(filters):
    conditions=get_conditions(filters)
    query = frappe.db.sql("""select sum(cn_amout) from tabComplaint where %s""" % conditions, filters)
    return query


def get_conditions(filters):
	conditions = ""
	if filters.date_from_filter and filters.date_to_filter:
		if filters.date_from_filter > filters.date_to_filter:
			frappe.throw("The 'From Date' ({}) must be before the 'To Date' ({})".format(filters.date_from_filter, filters.date_to_filter))
	if filters.date_from_filter == None:
		filters.date_from_filter = "2010-01-01"
	if filters.date_to_filter == None:
		filters.date_to_filter = frappe.datetime.get_today()
	conditions = "cpldate between '" + filters.date_from_filter + "' and '" + filters.date_to_filter + "'"
	if filters.get("status_filter"): conditions += "and complaint_status = %(status_filter)s"
	if filters.get("customer_filter"): conditions += "and customer = %(customer_filter)s"
	if filters.get("approval_filter"): conditions += "and approval_by = %(approval_filter)s"
	return conditions


